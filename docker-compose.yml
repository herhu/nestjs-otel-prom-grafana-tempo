services:

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: grafana/loki:2.9.12
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/tmp/loki"
    volumes:
      - ./data/loki-data:/tmp/loki

  otel-collector:
    image: otel/opentelemetry-collector:0.120.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./etc/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
    depends_on:
      - tempo
      - prometheus

  tempo:
    image: grafana/tempo:2.7.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./etc/tempo.yaml:/etc/tempo.yaml
      - ./data/tempo-data:/var/tempo
    ports:
      - "3200:3200"   # Tempo Query API (HTTP)
      - "4317:4317"   # OpenTelemetry gRPC (OTLP)
      - "4318:4318"   # OpenTelemetry HTTP (OTLP)
      - "14268:14268" # Jaeger endpoint (for traces)
      - "9411:9411"   # Zipkin endpoint (for traces)
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # Send traces to Tempo

  loki:
    image: grafana/loki:2.9.12
    command: -config.file=/etc/loki/loki.yaml
    ports:
      - "3100:3100" # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ./etc/loki.yaml:/etc/loki/loki.yaml
      - ./data/loki-data:/tmp/loki
    depends_on:
      - init

  promtail:
    image: grafana/promtail:2.9.12
    volumes:
      - ./etc/promtail-config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    ports:
      - "9080:9080"
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:v3.2.1
    volumes:
      - ./etc/prometheus.yaml:/etc/prometheus.yaml
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:11.5.2
    volumes:
      - ./data/grafana-data/datasources:/etc/grafana/provisioning/datasources
      - ./data/grafana-data/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./data/grafana-data/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
      - loki

  actor:
    build: ./services/actor
    ports:
      - 8081:8081
      - 5556:5556
    
    volumes:
      - ./data/logs:/app/logs
    environment:
      OTEL_SERVICE_NAME: actor
      OTEL_METRICS_PORT: 8081
    depends_on:
      - otel-collector

  movie:
    build: ./services/movie
    ports:
      - 8082:8082
      - 5555:5555
    volumes:
      - ./data/logs:/app/logs
    environment:
      OTEL_SERVICE_NAME: movie
      OTEL_METRICS_PORT: 8082
    depends_on:
      - otel-collector
